package net.addit.java.foundational.operator.bit;

/**
 * 移位运算符
 *
 * @author tony 241963698@qq.com
 * @version 2022/6/28 下午1:09
 * @since JDK8
 */
public class BitMoveOperator {
    public static void main(String[] args) {
        System.out.println("10<<2="+(10<<2));
                                        /*
        按位或计算过程：
        10 默认四个字节 0000 0000 0000 0000 0000 0000 0000 1010
        左移2位:      00 0000 0000 0000 0000 0000 0000 1010 00
        结果为40
         */
        System.out.println("-10<<2="+(-10<<2));
                                                /*
        按位或计算过程：
        -10 默认四个字节 1000 0000 0000 0000 0000 0000 0000 1010
        负数反码为：     1111 1111 1111 1111 1111 1111 1111 0101
        负数补码为:      1111 1111 1111 1111 1111 1111 1111 0110
        左移2位:      11 1111 1111 1111 1111 1111 1111 0110 00
        负数反码为：     1111 1111 1111 1111 1111 1111 1101 0111
        负数原码为:      1000 0000 0000 0000 0000 0000 0010 1000
        结果为-40
         */
        System.out.println("-256>>2="+(-256>>2));
                                                /*
        按位或计算过程：
        -256 默认四个字节 1000 0000 0000 0000 0000 0001 0000 0000
        负数反码为：     1111 1111 1111 1111 1111 1110 1111 1111
        负数补码为:      1111 1111 1111 1111 1111 1111 0000 0000
        右移2位:      11 1111 1111 1111 1111 1111 1111 0000 00
        负数反码为：     1111 1111 1111 1111 1111 1111 1011 1111
        负数原码为:      1000 0000 0000 0000 0000 0000 0100 0000
        结果为-64
         */
        System.out.println("-256>>>2="+(-256>>>2));
                                                /*
        按位或计算过程：
        -256 默认四个字节 1000 0000 0000 0000 0000 0001 0000 0000
        负数反码为：     1111 1111 1111 1111 1111 1110 1111 1111
        负数补码为:      1111 1111 1111 1111 1111 1111 0000 0000
        右移2位:      00 1111 1111 1111 1111 1111 1111 0000 00
        对齐：          0011 1111 1111 1111 1111 1111 1100 0000
        结果为1，073，741,760
         */
    }
}
