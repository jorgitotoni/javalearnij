package net.addit.java.foundational.operator.bit;

/**
 * 按位运算符使用
 *
 * @author tony 241963698@qq.com
 * @version 2022/6/28 下午12:20
 * @since JDK8
 */
public class BitOperator {
    public static void main(String[] args) {
        System.out.println("255 & 15 ="+(255 & 15));
        /*
        按位与计算过程：
        255 默认四个字节 0000 0000 0000 0000 0000 0000 1111 1111
        15 默认四个字节 0000 0000 0000 0000 0000 0000 0000 1111
        & 都是1为1其余为0： 0000 0000 0000 0000 0000 0000 0000 1111
        结果为15
         */

        System.out.println("128 | 64 ="+(128 | 64));
                /*
        按位或计算过程：
        128 默认四个字节 0000 0000 0000 0000 0000 0000 1000 0000
        64 默认四个字节 0000 0000 0000 0000 0000 0000 0100 0000
        | 有一个1为1其余为0： 0000 0000 0000 0000 0000 0000 1100 0000
        结果为192
         */
        System.out.println("128 | -64 ="+(128 | -64));
                /*
        按位或计算过程：
        -64 默认四个字节原码 1000 0000 0000 0000 0000 0000 0100 0000
        -64 默认四个字节反码 1111 1111 1111 1111 1111 1111 1011 1111
        -64 默认四个字节补码 1111 1111 1111 1111 1111 1111 1100 0000
        128 默认四个字节     0000 0000 0000 0000 0000 0000 1000 0000
        | 有一个1为1其余为0：1111 1111 1111 1111 1111 1111 1100 0000
        反码为：1111 1111 1111 1111 1111 1111 1011 1111
        原码为：1000 0000 0000 0000 0000 0000 0100 0000
        结果为-64
         */
        System.out.println("256 ^ 256 ="+(256 ^ 256));
                        /*
        按位或计算过程：
        256 默认四个字节 0000 0000 0000 0000 0000 0001 0000 0000
        ^ 相同为0： 0000 0000 0000 0000 0000 0000 0000 0000
        结果为0
         */
        System.out.println("256 ^ -256 ="+(256 ^ -256));
                        /*
        按位或计算过程：
        -256 默认四个字节原码 1000 0000 0000 0000 0000 0001 0000 0000
        -256 默认四个字节反码 1111 1111 1111 1111 1111 1110 1111 1111
        -256 默认四个字节补码 1111 1111 1111 1111 1111 1111 0000 0000
        256 默认四个字节     0000 0000 0000 0000 0000 0001 0000 0000
        ^ 相同为0：         1111 1111 1111 1111 1111 1110 0000 0000
        反码为：1111 1111 1111 1111 1111 1101 1111 1111
        原码为：1000 0000 0000 0000 0000 0010 0000 0000
        结果为-512
         */
        System.out.println("~245=" +(~245));
                                /*
        按位或计算过程：
        245 默认四个字节 0000 0000 0000 0000 0000 0000 1111 0101
        ~ 全部取反：     1111 1111 1111 1111 1111 1111 0000 1010
        负数反码为：     1111 1111 1111 1111 1111 1111 0000 1001
        负数原码为:      1000 0000 0000 0000 0000 0000 1111 0110
        结果为-246
         */
        System.out.println("~-256=" +(~-256));
                                /*
        按位或计算过程：
        -256 默认四个字节原码 1000 0000 0000 0000 0000 0001 0000 0000
        -256 默认四个字节反码 1111 1111 1111 1111 1111 1110 1111 1111
        -256 默认四个字节补码 1111 1111 1111 1111 1111 1111 0000 0000
        ~ 全部取反：         0000 0000 0000 0000 0000 0000 1111 1111
        结果为255
         */
    }
}
